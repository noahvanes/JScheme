(begin 
  (define (nqueens n)
    
    (define (append lst1 lst2)
      (if (null? lst1)
          lst2
          (cons (car lst1)
                (append (cdr lst1) lst2))))
    
    (define (_1-to n)
      (define (loop i l)
        (if (= i 0) 
            l 
            (loop (- i 1)
                  (cons i l))))
      (loop n '()))
    
    (define (ok? row dist placed)
      (if (null? placed)
          #t
          (if (= (car placed) (+ row dist))
              #f
              (if (= (car placed) (- row dist))
                  #f
                  (ok? row (+ dist 1) (cdr placed))))))
    
    (define (my-try x y z)
      (if (null? x)
          (if (null? y)
              1
              0)
          (+ (if (ok? (car x) 1 z)
                 (my-try (append (cdr x) y) '() (cons (car x) z))
                 0)
             (my-try (cdr x) (cons (car x) y) z))))
    
    (my-try (_1-to n) '() '()))
  
  (run-benchmark "N-QUEENS" (lambda () (nqueens 11))))