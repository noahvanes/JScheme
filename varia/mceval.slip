(begin

  (define (loop output environment)
    (define rollback environment)
    
    (define (evalexp expression)

      (define (abort message qualifier)
        (display message)
        (loop qualifier rollback))

      (define (bind-variable variable value)
        (define binding (cons variable value))
        (set! environment (cons binding environment)))

      (define (bind-parameters parameters arguments)
        (if (symbol? parameters)
          (bind-variable parameters arguments)
          (if (pair? parameters)
            (begin
              (define variable (car parameters))
              (define value (car arguments))
              (bind-variable variable value)
              (bind-parameters (cdr parameters) (cdr arguments))))))

      (define (thunkify expression)
        (define frozen-environment environment)
        (define value (evalexp expression))
        (set! environment frozen-environment)
        value)

      (define (evaluate-sequence expressions)
        (define head (car expressions))
        (define tail (cdr expressions))
        (define value (evalexp head))
        (if (null? tail)
          value
          (evaluate-sequence tail)))

      (define (close parameters expressions)
        (define lexical-environment environment)
        (define (closure . arguments)
          (define dynamic-environment environment)
          (set! environment lexical-environment)
          (bind-parameters parameters arguments)
          (define value (evaluate-sequence expressions))
          (set! environment dynamic-environment)
          value)
        closure)

      (define (evaluate-application operator)
        (lambda operands
          (apply (evalexp operator) (map evalexp operands))))

      (define (evaluate-begin . expressions)
        (evaluate-sequence expressions))

      (define (evaluate-define pattern . expressions)
        (if (symbol? pattern)
          (begin
            (define value (evalexp (car expressions)))
            (define binding (cons pattern value))
            (set! environment (cons binding environment))
            value)
          (begin
            (define binding (cons (car pattern) ()))
            (set! environment (cons binding environment))
            (define closure (close (cdr pattern) expressions))
            (set-cdr! binding closure)
            closure)))

      (define (evaluate-eval expression)
        (evalexp (evalexp expression)))

      (define (evaluate-if predicate consequent . alternate)
        (if (evalexp predicate)
          (thunkify consequent)
          (if (null? alternate)
            ()
            (thunkify (car alternate)))))

      (define (evaluate-lambda parameters . expressions)
        (close parameters expressions))

      (define (evaluate-quote expression)
        expression)

      (define (evaluate-set! variable expression)
        (define value (evalexp expression))
        (define binding (assoc variable environment))
        (if (pair? binding)
          (set-cdr! binding value)
          (abort "inaccessible variable: " variable)))

      (define (evaluate-variable variable)
        (define binding (assoc variable environment))
        (if (pair? binding)
          (cdr binding)
          (eval variable)))

      (define (evaluate-load file)
        (evalexp (read (evalexp file))))

      (define (evaluate-while predicate body)
        (define (iterate value)
          (if (evalexp predicate)
            (iterate (evalexp body))
            value))
        (iterate ()))

      (if (symbol? expression)
        (evaluate-variable expression)
        (if (pair? expression)
          (begin
            (define operator (car expression))
            (define operands (cdr expression))
            (apply
              (if (eq? operator 'begin) evaluate-begin
                (if (eq? operator 'define) evaluate-define
                  (if (eq? operator 'eval) evaluate-eval
                    (if (eq? operator 'if) evaluate-if
                      (if (eq? operator 'lambda) evaluate-lambda
                        (if (eq? operator 'quote) evaluate-quote
                          (if (eq? operator 'set!) evaluate-set!
                            (if (eq? operator 'while) evaluate-while
                              (if (eq? operator 'load) evaluate-load
                                (evaluate-application operator)))))))))) operands))
          expression)))

    (display output)
    (newline)
    (loop (evalexp (read)) environment))

  (loop "Meta-Circular Slip" ()))